mod parse {
    type IResult<'a, T> = nom::IResult<&'a str, T>;

    pub fn final_parse(input: &str) -> IResult<&str> {
        todo!()
    }
}

type Generated = String;

#[aoc_generator(day{{ day }})]
fn generate(input: &str) -> Generated {
    input.to_owned()
}

#[aoc(day{{ day }}, part1)]
fn solve_part1(_input: &Generated) -> usize {
    todo!()
}

#[aoc(day{{ day }}, part2)]
fn solve_part2(_input: &Generated) -> usize {
    todo!()
}

#[cfg(test)]
mod test {
    #![allow(unreachable_code)]
    use super::*;
    use test_case::test_case;

    const SAMPLE_INPUT: &str = todo!();

    fn sample_parsed() -> Generated {
        generate(SAMPLE_INPUT)
    }

    fn mine_parsed() -> Generated {
        generate(&crate::get_input({{ day }}))
    }

    #[test_case(sample_parsed(), todo!(); "sample")]
    #[test_case(mine_parsed(), todo!(); "mine")]
    fn part1(parsed: Generated, solution: usize) {
        assert_eq!(solve_part1(&parsed), solution);
    }

    #[test_case(sample_parsed(), todo!(); "sample")]
    #[test_case(mine_parsed(), todo!(); "mine")]
    fn part2(parsed: Generated, solution: usize) {
        assert_eq!(solve_part2(&parsed), solution);
    }
}
