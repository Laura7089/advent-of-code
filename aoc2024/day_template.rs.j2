mod parse {
    type IResult<'a, T> = nom::IResult<&'a str, T>;

    pub fn final_parse(input: &str) -> IResult<&str> {
        todo!()
    }
}

#[aoc_generator(day{{ day }})]
fn generate(input: &str) -> String {
    input.to_owned()
}

#[aoc(day{{ day }}, part1)]
fn solve_part1(_input: &str) -> usize {
    todo!()
}

#[aoc(day{{ day }}, part2)]
fn solve_part2(_input: &str) -> usize {
    todo!()
}

#[cfg(test)]
mod tests {
    #![allow(unreachable_code)]
    use super::*;

    const SAMPLE_INPUT: &str = todo!();

    mod part1 {
        use super::*;

        #[test]
        fn example() {
            assert_eq!(solve_part1(&generate(SAMPLE_INPUT)), todo!());
        }

        #[test]
        fn mine() {
            assert_eq!(solve_part1(&generate(&crate::get_input({{ day }}))), todo!());
        }
    }

    mod part2 {
        use super::*;

        #[test]
        fn example() {
            assert_eq!(solve_part2(&generate(SAMPLE_INPUT)), todo!());
        }

        #[test]
        fn mine() {
            assert_eq!(solve_part2(&generate(&crate::get_input({{ day }}))), todo!());
        }
    }
}
