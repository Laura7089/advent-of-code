!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
ThreadPool	python/6/part1.py	/^from multiprocessing.dummy import Pool as ThreadPool$/;"	x
alphStr	python/5/part2.py	/^alphStr = "abcdefghijklmnopqrstuvwxyz"$/;"	v
areas	python/6/part1.py	/^areas = {str(num): 0 for num in list(range(len(xCoords)))}$/;"	v
checksum	python/2/part1.py	/^checksum = functools.reduce(operator.mul, totals, 1)$/;"	v
comparison	python/2/part2.py	/^    comparison = findEqualLetters(data[i], data[i + 1:])$/;"	v
coords	python/6/part1.py	/^    coords = cpuPool.map(lambda line: [int(coord) - 1 for coord in line.replace("\\n", "").repla/;"	v
cpuPool	python/2/part1.py	/^cpuPool = multiprocessing.dummy.Pool(multiprocessing.cpu_count())$/;"	v
cpuPool	python/2/part2.py	/^cpuPool = multiprocessing.dummy.Pool(multiprocessing.cpu_count())$/;"	v
cpuPool	python/3/part1.py	/^cpuPool = multiprocessing.dummy.Pool(multiprocessing.cpu_count())$/;"	v
cpuPool	python/3/part2.py	/^cpuPool = multiprocessing.dummy.Pool(multiprocessing.cpu_count())$/;"	v
cpuPool	python/6/part1.py	/^cpuPool = ThreadPool(cpu_count()) $/;"	v
crossoverAreas	python/3/part1.py	/^crossoverAreas = cpuPool.map(lambda column: collections.Counter(column.values())["X"], grid.valu/;"	v
currentGuard	python/4/part1.py	/^        currentGuard = point[1]$/;"	v
data	python/1/part1.py	/^    data = [int(i.replace("\\n", "")) for i in dataFile.readlines()]$/;"	v
data	python/1/part2.py	/^    data = [int(i.replace("\\n", "")) for i in dataFile.readlines()]$/;"	v
data	python/2/part1.py	/^    data = cpuPool.map(lambda dataPoint: dataPoint.replace("\\n", ""), dataFile.readlines())$/;"	v
data	python/2/part2.py	/^    data = cpuPool.map(lambda point: point.replace("\\n", ""), dataFile.readlines())$/;"	v
data	python/3/part1.py	/^    data = cpuPool.map(lambda line: [int(char) for char in re.sub("[^\\d]", " ", line).split(" "/;"	v
data	python/3/part2.py	/^    data = cpuPool.map(lambda line: [int(char) for char in re.sub("[^\\d]", " ", line).split(" "/;"	v
data	python/3/part2.py	/^data = cpuPool.map(lambda point: (point[0], (point[1], point[1] + point[3]), (point[2], point[2]/;"	v
data	python/4/part1.py	/^    data = [formatData(line.replace("\\n", "")) for line in dataFile.readlines()]$/;"	v
data	python/5/part1.py	/^    data = dataFile.readline().replace("\\n", "")$/;"	v
data	python/5/part2.py	/^    data = dataFile.readline().replace("\\n", "")$/;"	v
daySeq	python/4/part1.py	/^        daySeq = list()$/;"	v
equalLetters	python/2/part2.py	/^def equalLetters(string1, string2):$/;"	f
findEqualLetters	python/2/part2.py	/^def findEqualLetters(source, targets):$/;"	f
formatData	python/4/part1.py	/^def formatData(dataStr):$/;"	f
frequencies	python/2/part1.py	/^frequencies = cpuPool.map(lambda num: {freq: None for freq in Counter(num).values() if freq > 1}/;"	v
frequencies	python/2/part1.py	/^frequencies = list(itertools.chain.from_iterable(frequencies))$/;"	v
grid	python/3/part1.py	/^grid = dict()$/;"	v
grid	python/3/part2.py	/^grid = dict()$/;"	v
grid	python/3/part2.py	/^grid = {$/;"	v
grid	python/6/part1.py	/^grid = cpuPool.map(lambda xPos: ["." for y in range(max(yCoords) + 1)], range(max(xCoords) + 1))$/;"	v
guards	python/4/part1.py	/^guards = dict()$/;"	v
index	python/1/part2.py	/^index = 1$/;"	v
lengths	python/5/part2.py	/^lengths = [len(reactUntilDone(point)) for point in vetted]$/;"	v
lines	python/7/part1.py	/^    lines = [line.replace("\\n", "").split(" ") for line in dataFile.readlines()]$/;"	v
main	rust/problem1/src/main.rs	/^fn main() {$/;"	f
multiReplace	python/4/common.py	/^def multiReplace(targetStr, target, replacement):$/;"	f
multiReplace	python/common.py	/^def multiReplace(targetStr, target, replacement):$/;"	f
nearestCoord	python/6/part1.py	/^def nearestCoord(targetGrid, targetX, targetY):$/;"	f
newInfo	python/4/part1.py	/^    newInfo = list()$/;"	v
nextTotal	python/1/part2.py	/^    nextTotal = total + data[index % len(data)]$/;"	v
react	python/5/part1.py	/^def react(polymerString):$/;"	f
react	python/5/part2.py	/^def react(polymerString):$/;"	f
reactUntilDone	python/5/part1.py	/^def reactUntilDone(polymerString):$/;"	f
reactUntilDone	python/5/part2.py	/^def reactUntilDone(polymerString):$/;"	f
readData	rust/problem1/src/main.rs	/^fn readData() -> String {$/;"	f
requireList	python/7/part1.py	/^requireList = list()$/;"	v
requirements	python/7/part1.py	/^requirements = {step: list() for step in requisites + requirers}$/;"	v
requirers	python/7/part1.py	/^    requirers = [line[7] for line in lines]$/;"	v
requisites	python/7/part1.py	/^    requisites = [line[1] for line in lines]$/;"	v
result	python/5/part1.py	/^result = reactUntilDone(data)$/;"	v
sleepTime	python/4/part1.py	/^        sleepTime = $/;"	v
total	python/1/part2.py	/^        total = nextTotal$/;"	v
total	python/1/part2.py	/^total = data[0]$/;"	v
totals	python/1/part2.py	/^totals = {total: True}$/;"	v
totals	python/2/part1.py	/^totals = [total for total in Counter(frequencies).values() if total > 1]$/;"	v
vetted	python/5/part2.py	/^vetted = [data.replace(letter, "").replace(letter.swapcase(), "") for letter in alphStr]$/;"	v
xCoords	python/6/part1.py	/^xCoords = [coord[0] for coord in coords]$/;"	v
yCoords	python/6/part1.py	/^yCoords = [coord[1] for coord in coords]$/;"	v
