{
  "src/*.rs": {
    "type": "source"
  },
  "src/day*.rs": {
    "type": "day",
    "template": [
      "#[aoc_generator(day{})]",
      "pub fn parse_input(input: &str) -> Vec<usize> {",
      "    input.split(',').map(|n| n.parse().unwrap()).collect()",
      "}",
      "",
      "#[aoc(day{}, part1)]",
      "pub fn solve_part1(_input: &[usize]) -> usize {",
      "    todo!()",
      "}",
      "",
      "#[aoc(day{}, part2)]",
      "pub fn solve_part2(_input: &[usize]) -> usize {",
      "    todo!()",
      "}",
      "",
      "#[cfg(test)]",
      "mod tests {",
      "    use super::*;",
      "",
      "    const EXAMPLE_INPUT: &'static str = \"\";",
      "",
      "    #[test]",
      "    fn part1_example() {",
      "        assert_eq!(solve_part1(&parse_input(&EXAMPLE_INPUT)), todo!());",
      "    }",
      "",
      "    #[test]",
      "    fn part2_example() {",
      "        assert_eq!(solve_part2(&parse_input(&EXAMPLE_INPUT)), todo!());",
      "    }",
      "",
      "    #[test]",
      "    fn part1_myinput() {",
      "        let _input = crate::get_input_for_day({});",
      "        assert_eq!(solve_part1(&parse_input(&_input)), todo!());",
      "    }",
      "",
      "    #[test]",
      "    fn part2_myinput() {",
      "        let _input = crate::get_input_for_day({});",
      "        assert_eq!(solve_part2(&parse_input(&_input)), todo!());",
      "    }",
      "}"
    ]
  }
}
